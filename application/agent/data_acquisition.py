# Model of the data acquisition specification

from util import tobytes

class DataAcquisition:

    dacq_id = 0             # id generated by security functions
    N = 0                   # number of times to repeat
    n = 0                   # number of patterns in this wave

    patterns = []           # container for data acquisition patterns
    
    def __init__(self, dacq_id, N, n):
        self.dacq_id = dacq_id
        self.N = N
        self.n = n

    def marshall(self):
        data = []

        # pack up header
        data += tobytes(self.dacq_id, 2)
        data += tobytes(self.N, 2)
        data += tobytes(self.n, 2)

        # pack up patterns
        for pattern in self.patterns:
            data += pattern.marshall()

        return bytearray(data)


class Pattern:

    N = 0                   # number of pattern repeats
    n = 0                   # number of segments in pattern

    segments = []           # container for pattern segments
    
    def __init__(self, N, n):
        self.N = N
        self.n = n

    def marshall(self):
        data = []

        # pack up header
        data += tobytes(self.N, 2)
        data += tobytes(self.n, 2)

        # pack up segments
        for segment in self.segments:
            data += segment.marshall()

        return data

class Segment:

    n = 0                   # number of samples in this segment

    sample = None           # container for sample reference
    
    def __init__(self, n):
        self.n = n

    def marshall(self):
        data = []

        # pack up header
        data += tobytes(self.n, 2)

        # pack up sample
        data += self.sample.marshall()

        return data

class Sample:

    t = 0                   # number of ticks in this sample period
    x = 0                   # take sample at beginning or end of period

    def __init__(self, t, x):
        self.t = t
        self.x = x

    def marshall(self):
        data = []

        # pack up fields
        data += tobytes(self.t, 2)
        data += tobytes(self.x, 1)

        return data
        
