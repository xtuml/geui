# --------------------------------------------------------------------------------------------- #
#   data_acquisition.py                                                                         #
#                                                                                               #
#   Classes defined in this file:                                                               #
#       * DataAcquisition                                                                       #
#       * Pattern                                                                               #
#       * Segment                                                                               #
#       * Sample                                                                                #
# --------------------------------------------------------------------------------------------- #

from util import tobytes

# --------------------------------------------------------------------------------------------- #
#   DataAcquisition class                                                                       #
#                                                                                               #
#   DataAcquisition is an object definition for how and when to take a data point during an     #
#   experiment. The marshall() method packages the object into a byte array according to the    #
#   file formats documentation.                                                                 #
# --------------------------------------------------------------------------------------------- #
class DataAcquisition:

    dacq_id = 0             # id generated by security functions
    N = 0                   # number of times to repeat
    n = 0                   # number of patterns in this wave

    patterns = []           # container for data acquisition patterns
    
    def __init__(self, dacq_id, N, n):
        self.dacq_id = dacq_id
        self.N = N
        self.n = n

    def add_pattern(self, pattern):
        self.patterns.append(pattern)

    def marshall(self):
        data = []

        # pack up header
        data += tobytes(self.dacq_id, 2)
        data += tobytes(self.N, 2)
        data += tobytes(self.n, 2)

        # pack up patterns
        for pattern in self.patterns:
            data += pattern.marshall()

        return bytearray(data)
# --------------------------------------------------------------------------------------------- #


# --------------------------------------------------------------------------------------------- #
#   Pattern class                                                                               #
#                                                                                               #
#   The Pattern class represents a repeating period of similar data acquisition. A              #
#   DataAcquisition object is expected to have one or more patterns. Each pattern has one or    #
#   more segments.                                                                              #
# --------------------------------------------------------------------------------------------- #
class Pattern:

    N = 0                   # number of pattern repeats
    n = 0                   # number of segments in pattern

    segments = []           # container for pattern segments
    
    def __init__(self, N, n):
        self.N = N
        self.n = n

    def add_segment(self, segment):
        self.segments.append(segment)

    def marshall(self):
        data = []

        # pack up header
        data += tobytes(self.N, 2)
        data += tobytes(self.n, 2)

        # pack up segments
        for segment in self.segments:
            data += segment.marshall()

        return data
# --------------------------------------------------------------------------------------------- #


# --------------------------------------------------------------------------------------------- #
#   Segment class                                                                               #
#                                                                                               #
#   The Segment class represents one homogenous set of samples. It is made up of a sample       #
#   object and the number of those samples to take                                              #
# --------------------------------------------------------------------------------------------- #
class Segment:

    n = 0                   # number of samples in this segment

    sample = None           # container for sample reference
    
    def __init__(self, n):
        self.n = n

    def marshall(self):
        data = []

        # pack up header
        data += tobytes(self.n, 2)

        # pack up sample
        data += self.sample.marshall()

        return data
# --------------------------------------------------------------------------------------------- #


# --------------------------------------------------------------------------------------------- #
#   Sample class                                                                                #
#                                                                                               #
#   The Sample class represents one point of data to be taken by the instrument. It consists    #
#   of the width of the sample in ticks and whether or not to take the sample at the beginning  #
#   or end.                                                                                     #
# --------------------------------------------------------------------------------------------- #
class Sample:

    t = 0                   # number of ticks in this sample period
    x = 0                   # take sample at beginning or end of period

    def __init__(self, t, x):
        self.t = t
        self.x = x

    def marshall(self):
        data = []

        # pack up fields
        data += tobytes(self.t, 2)
        data += tobytes(self.x, 1)

        return data
# --------------------------------------------------------------------------------------------- #
